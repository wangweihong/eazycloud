# example-grpc 全配置

# 通用服务配置
server:
  reflect: false # 是否安装反射服务。如果开启, 则可以通过反射获取gRPC服务信息。默认 false
  version: true # 是否安装版本服务，默认 true
  debug: false # 是否安装调试服务，默认 false
  max-msg-size:   4194304 # 消息最多字节数, 默认4M
  unary-interceptors: requestid,context,logger,recovery # unary拦截器
  runtime-debug: true # 启动运行时调试, 可通过Linux信号触发进行程序性能采集等。
  runtime-debug-dir: ${EXAMPLE_GRPC_RUNTIME_DEBUG_OUTPUT_DIR} # 运行时调试时采集的数据存放目录

# gRPC TCP服务器配置
tcp:
  required: true
  bind-address: ${EXAMPLE_GRPC_BIND_ADDRESS} #gRPC 监听地址，如果是tcp协议,默认为 0.0.0.0; 如果是UDP协议默认是/var/run/example-grpc.socket
  bind-port: ${EXAMPLE_GRPC_BIND_PORT} # 使用 gRPC 端口号默认为 8081
  tls-enable: false # 是否开启TLS服务
  # TLS证书配置,其中cert-data/cert-key/cert-dir,pair-name 三种方式选择其一即可。
  # 优先级最高为cert-data,其次为cert-key,最后为cert-dir,pair-name
  tls:
    cert-dir:  # TLS 证书所在的目录
    pair-name:  # TLS 证书私钥对名称
    cert-data:
      cert: # TLS 证书PEM数据
      key:  # TLS 私钥PEM数据
    cert-key:
      cert-file: ${EXAMPLE_GRPC_TLS_CERT_FILE} # 包含 x509 证书的文件路径，用于 TLS 认证
      private-key-file: ${EXAMPLE_GRPC_TLS_CERT_KEY} # TLS 私钥
    client-ca-data: # 客户端CA证书PEM数据. 如果设置,则开启mTLS
    client-ca-path: # 客户端CA证书路径. 如果设置,则开启mTLS
unix:
  socket: ${EXAMPLE_GRPC_UNIX_SOCKET}

# 日志配置
log:
  name: example-grpc # Logger的名字
  development: true # 是否是开发模式。如果是开发模式，会对DPanicLevel进行堆栈跟踪。
  level: debug # 日志级别，优先级从低到高依次为：debug, info, warn, error, dpanic, panic, fatal。
  format: console # 支持的日志输出格式，目前支持console和json两种。console其实就是text格式。
  enable-color: true # 是否开启颜色输出，true:是，false:否
  disable-caller: false # 是否开启 caller，如果开启会在日志中显示调用日志所在的文件、函数和行号
  disable-stacktrace: false # 是否再panic及以上级别禁止打印堆栈信息
  output-paths: ${EAZYCLOUD_LOG_DIR}/example-grpc.log,stdout # 支持输出到多个输出，逗号分开。支持输出到标准输出（stdout）和文件。
  error-output-paths: ${EAZYCLOUD_LOG_DIR}/example-grpc.error.log # zap内部(非业务)错误日志输出路径，多个输出，逗号分开
